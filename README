
def get_regions():
    """Get a list of all AWS regions."""
    regions = subprocess.run(['aws', 'ec2', 'describe-regions', '--query', 'Regions[].RegionName', '--output', 'json'], capture_output=True, text=True)
    return json.loads(regions.stdout)

def get_instances(region):
    """Get a list of all EC2 instance IDs in a specific region."""
    instances = subprocess.run(['aws', 'ec2', 'describe-instances', '--region', region, '--query', 'Reservations[*].Instances[*].InstanceId', '--output', 'json'], capture_output=True, text=True)
    instance_ids = json.loads(instances.stdout)
    return [id for sublist in instance_ids for id in sublist]

def add_tags(instance_ids, region):
    """Add tags to a list of instances in a specified region."""
    for instance_id in instance_ids:
        tag_arguments = []
        for tag in tags:
            tag_arguments.append('Key={},Value={}'.format(tag['Key'], tag['Value']))

        tag_string = ' '.join(tag_arguments)
        subprocess.run(['aws', 'ec2', 'create-tags', '--resources', instance_id, '--tags', tag_string, '--region', region])

def main():
    for region in get_regions():
        print(f"Processing region: {region}")
        instance_ids = get_instances(region)
        if instance_ids:
            print(f"Adding tags to instances in region: {region}")
            add_tags(instance_ids, region)
        else:
            print(f"No instances found in region: {region}")

if __name__ == "__main__":
    main()
