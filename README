cmdOutput, err := cmd.Output()
    if err != nil {
        fmt.Printf("Error listing instances in region %s: %s\n", region, err)
        return
    }

    output := strings.TrimSpace(string(cmdOutput))
    if output == "" {
        fmt.Println("No instances found in this region.")
        return
    }

    lines := strings.Split(output, "\n")
    for i, line := range lines {
        // Split each line by tabs to separate the instance ID from the Name tag
        parts := strings.Split(line, "\t")
        instanceID := parts[0]
        instanceName := "No Name Tag"
        if len(parts) > 1 && parts[1] != "" {
            instanceName = parts[1]
        }
        fmt.Printf("%d. %s (%s)\n", i+1, instanceID, instanceName)
    }

    instances := strings.Fields(output) // Assuming output is space-separated instance IDs
    fmt.Println("Instances in region:", region)
    for i, instance := range instances {
        fmt.Printf("%d. %s\n", i+1, instance)
    }

    fmt.Println("Select an instance by number to connect or enter 0 to exit:")
    var selection int
    if _, err := fmt.Scanln(&selection); err != nil {
        fmt.Println("Invalid input, exiting.")
        return
    }

	if selection > 0 && selection <= len(instances) {
		selectedInstanceID := instances[selection-1]
		fmt.Printf("Connecting to instance %s in region %s...\n", selectedInstanceID, region)
		connectInstance(selectedInstanceID, region) // This is how you'd call it
	} else if selection != 0 {
		fmt.Println("Invalid selection, exiting.")
	}
}
