package main

import (
    "bytes"
    "fmt"
    "os"
    "os/exec"
    "strings"
    "github.com/spf13/cobra"
)

func main() {
    var rootCmd = &cobra.Command{
        Use:   "ssm-cli",
        Short: "SSM CLI to connect to EC2 instances across regions",
        Run: func(cmd *cobra.Command, args []string) {
            // Command logic here
        },
    }

    var connectCmd = &cobra.Command{
        Use:   "connect [instance-id]",
        Short: "Connect to an EC2 instance",
        Args:  cobra.MinimumNArgs(1),
        Run:   connectInstance,
    }

    rootCmd.AddCommand(connectCmd)
    rootCmd.Execute()
}

func connectInstance(cmd *cobra.Command, args []string) {
    instanceID := args[0]
    region, err := findInstanceRegion(instanceID)
    if err != nil {
        fmt.Println("Error finding instance:", err)
        return
    }

    err = startSSMSession(instanceID, region)
    if err != nil {
        fmt.Println("Error starting SSM session:", err)
        return
    }
}

func findInstanceRegion(instanceID string) (string, error) {
    // Run AWS CLI command to describe instances in all regions
    // and parse output to find the region for the given instance ID
    cmd := exec.Command("bash", "-c", "aws ec2 describe-regions --query 'Regions[].RegionName' --output text | xargs -I {} aws ec2 describe-instances --region {} --instance-ids "+instanceID+" --query 'Reservations[0].Instances[0].InstanceId' --output text")
    var out bytes.Buffer
    cmd.Stdout = &out
    err := cmd.Run()
    if err != nil {
        return "", err
    }

    // Process the output to extract the region
    output := strings.TrimSpace(out.String())
    if output == "None" || output == "" {
        return "", fmt.Errorf("instance ID %s not found in any region", instanceID)
    }
    return output, nil
}

func startSSMSession(instanceID, region string) error {
    // Run AWS CLI command to start a Session Manager session
    cmd := exec.Command("aws", "ssm", "start-session", "--target", instanceID, "--region", region)
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    cmd.Stdin = os.Stdin
    return cmd.Run()
}
